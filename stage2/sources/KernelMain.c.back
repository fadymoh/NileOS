#include "Kernel.h"
#include "PCIConfigHeader.h"

Kernel kernel;
GlobalDescriptorTablePointer  globalDescriptorTablePointer;
InterruptDescriptorTablePointer interruptDescriptorTablePointer;
uint8_t * buffer;
/**************************************************************************/

extern void ap_kernel_main(uint64_t p_start_stack,uint64_t p_end_stack)
{
}

/******************************************************************************
                        Kernel Main Entry Point
 * 
 * This is the main entry point to the C Land kernel and it is defined as       
 * extern to be accessible from within the asm/stage2/kernel_wrapper.asm
 * 
 * The kernel_main function receives the following two parameters which are
 * passed to it to identify the start and end addresses of the stack:
 *      uint64_t p_start_stack: A 64-bit address indicating the start of the 
 *              stack. The lower bound as stack starts at a higher address
 *              and grows up in the direction of lower addresses
 *      uint64_t p_end_stack: A 64-bit address indicating the end of the stack
******************************************************************************/

extern void bsp_kernel_main(uint64_t p_start_stack,uint64_t p_end_stack)
{    
    //Terminal terminal;
//    char buffer1 [300];
//    char buffer2 [300];
//    uint32_t i=0;
//    uint16_t i = 0;
//    uint8_t * mem;
//    char temp[512];
    
    
    Console * console = &(kernel.console);
    char * temp = (char *) KERNELKMALLOC_INITIAL_MEMORY_ADDRESS+0x010000;
    console_preInialize(console);

    console_addStringToCurrentTerminal(console,"Memory Page Map Record Size: ",COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addHexaToCurrentTerminal(console,sizeof(MemoryPageMap),COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);

    
    if ( initializePhysicalMemory(&kernel.physicalMemoryManager))
    {
        printPhysicalMemory(&kernel.physicalMemoryManager,console);
    }
    else console_addStringToCurrentTerminal(console,"Cat find physical memory indicator: Initialization Failed ",COLOR_RED,COLOR_LIGHT_BROWN);


    
    
    initializeMemoryPageMap (console,&kernel);

    console_addStringToCurrentTerminal(console,"Total mapped pages:",COLOR_RED,COLOR_LIGHT_BROWN);     
    console_addHexaToCurrentTerminal(console,kernel.memoryPageMap->mapped_pages,COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);

    console_addStringToCurrentTerminal(console,"Last virtual address:",COLOR_RED,COLOR_LIGHT_BROWN);     
    console_addHexaToCurrentTerminal(console,kernel.memoryPageMap->last_virtual_address,COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);

   /*    console_addStringToCurrentTerminal(console,"memoryPageMap->kmalloc_end_address:",COLOR_RED,COLOR_LIGHT_BROWN);     
    console_addHexaToCurrentTerminal(console,kernel.memoryPageMap->kmalloc_end_address,COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);*/
    memset(temp,0,512);
    memcpy(temp,"Hello all this is kemosparc: Memory map at far address\n",strlen("Hello all this is kemosparc: Memory map at far address\n"));
    console_addStringToCurrentTerminal(console,temp,COLOR_RED,COLOR_LIGHT_BROWN);
    
    kernel.globalDescriptorTablePointer = &globalDescriptorTablePointer;
    initGlobalDescriptorTable ();
    gdtInit();
    tssFlush();
    
    /*for ( uint64_t mem_address = kernel.memoryAllocator.memory_current_address ; 
            mem_address < kernel.memoryAllocator.memory_end_address ; mem_address++)
    {
        mem  = (uint8_t *) mem_address;
        *mem = mem_address % 200;
        if ( mem_address % 0x10000000 == 0 )
        {
            console_addStringToCurrentTerminal(console,"Wrote to memory address:",COLOR_RED,COLOR_LIGHT_BROWN);     
            console_addHexaToCurrentTerminal(console,mem_address,COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
        }
    }*/
    kernel.acpi.physicalMemoryManager = & kernel.physicalMemoryManager;    
    if ( init_acpi(&kernel.acpi))
    {   
        console_addStringToCurrentTerminal(console,"ACPI Detected with rsdt address at:",COLOR_RED,COLOR_LIGHT_BROWN);     
        console_addHexaToCurrentTerminal(console,kernel.acpi.rsdpDescriptor->xsdtAddr,COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(console,":",COLOR_RED,COLOR_LIGHT_BROWN);     
        console_addHexaToCurrentTerminal(console,getVirtualAddress(&kernel.physicalMemoryManager,kernel.acpi.rsdpDescriptor->xsdtAddr),COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(console,"Detected ",COLOR_RED,COLOR_LIGHT_BROWN);     
        console_addHexaToCurrentTerminal(console,kernel.acpi.cores_count,COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(console," cores \n",COLOR_RED,COLOR_LIGHT_BROWN);     
        console_addStringToCurrentTerminal(console,"Local APIC: ",COLOR_RED,COLOR_LIGHT_BROWN);     
        console_addHexaToCurrentTerminal(console,kernel.acpi.local_apic_addr,COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(console,"\n",COLOR_RED,COLOR_LIGHT_BROWN);     
            
    }
    
    collectHWEnventory();
    console_addStringToCurrentTerminal(console,"PCI Detected Devices:",COLOR_RED,COLOR_LIGHT_BROWN);     
    console_addHexaToCurrentTerminal(console,kernel.pciConfigHeaderManager.total_pci_devices,COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addStringToCurrentTerminal(console,"\n",COLOR_RED,COLOR_LIGHT_BROWN);         
    initializeInterruptManager();
    console_addStringToCurrentTerminal(console,"Finished Setting up IVT\n",COLOR_RED,COLOR_LIGHT_BROWN);     
/*    for ( int i = 0 ; i < kernel.pciConfigHeaderManager.total_pci_devices ; i ++)
    {
//        if ( kernel.pciConfigHeaderManager.pciConfigHeaders[i].pci_major == 
//                kernel.pciConfigHeaderManager.pciConfigHeaders[i].pci_minor == 0x1)
//                {
                    console_addStringToCurrentTerminal(console,"Found an ATA drive[",COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addHexaToCurrentTerminal(console,i,COLOR_RED,COLOR_LIGHT_BROWN); 
                    console_addStringToCurrentTerminal(console,"]:",COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addHexaToCurrentTerminal(console,kernel.pciConfigHeaderManager.pciConfigHeaders[i].dev_id,COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addStringToCurrentTerminal(console,"/",COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addHexaToCurrentTerminal(console,kernel.pciConfigHeaderManager.pciConfigHeaders[i].vend_id,COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addStringToCurrentTerminal(console,"/",COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addHexaToCurrentTerminal(console,kernel.pciConfigHeaderManager.pciConfigHeaders[i].int_line,COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addStringToCurrentTerminal(console,"/",COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addHexaToCurrentTerminal(console,kernel.pciConfigHeaderManager.pciConfigHeaders[i].int_pin,COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addStringToCurrentTerminal(console,"\n",COLOR_RED,COLOR_LIGHT_BROWN);
//                }
    }*/
    
    //initializePit();
/*    PCIConfigHeader pciConfigHeader;
    uint16_t total_pci_devices = 0;
    for(uint16_t bus = 0 ; bus < MAX_PCI_BUSES ; bus ++)
    {
        for(uint8_t i = 0;  i <  MAX_PCI_BUS_DEVICES; i++)
        {
            for(uint8_t j = 0;  j <  MAX_PCI_DEVICE_FUNCTIONS; j++)
            {
                pciConfig_initialize(&pciConfigHeader,bus,i,j);
                if( pciConfigHeader.vend_id == 0xFFFF) continue;
                else
                {
                    console_addHexaToCurrentTerminal(console,pciConfigHeader.dev_id,COLOR_BLUE,COLOR_LIGHT_BROWN);                    
                    console_addStringToCurrentTerminal(console,"/",COLOR_RED,COLOR_LIGHT_BROWN);     
                    console_addHexaToCurrentTerminal(console,pciConfigHeader.vend_id,COLOR_BLUE,COLOR_LIGHT_BROWN);
                    console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
                    
                    total_pci_devices ++;
                }
            }
        }
    }
    
    console_addStringToCurrentTerminal(console,"Total PCI Devices:",COLOR_RED,COLOR_LIGHT_BROWN);     
    console_addHexaToCurrentTerminal(console,total_pci_devices,COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
    
*/    
    
    /*void * ptr1 = (void *) 0x0;
    
    
    char * temp = scanmem (ptr1,E820_MEMORY_INDICATOR,1024*1024,E820_MEMORY_INDICATOR_LENGTH-1);
    if ( temp != NULL)
    {
        console_addStringToCurrentTerminal(console,"Found Memory Indicator: ",COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(console,temp,COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
        uint16_t * mmap_ent = (uint16_t *) ((temp) + E820_MEMORY_INDICATOR_LENGTH + E820_MEMORY_ENTRY_TABLE_SIZE);
        uint16_t entries  =mmap_ent[0];
        console_addStringToCurrentTerminal(console,"Number of memory entries: ",COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addHexaToCurrentTerminal(console,entries,COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
        
        PhysicalMemoryEntry * physicalMemoryEntry = (PhysicalMemoryEntry *) ((temp) + E820_MEMORY_INDICATOR_LENGTH);
        uint16_t i = 0;
            uint64_t total_memory = 0;
        for ( i = 0 ; i < entries; i++)
        {
            console_addStringToCurrentTerminal(console,"Start: ",COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addHexaToCurrentTerminal(console,physicalMemoryEntry[i].start,COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addStringToCurrentTerminal(console,"    Size: ",COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addHexaToCurrentTerminal(console,physicalMemoryEntry[i].size,COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addStringToCurrentTerminal(console,"    Type: ",COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addStringToCurrentTerminal(console,mem_types[physicalMemoryEntry[i].type-1],COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
            if (physicalMemoryEntry[i].type == E820_MEMORY_ENTRY_TYPE_USABLE)
                total_memory += physicalMemoryEntry[i].size;
            
        }
            console_addStringToCurrentTerminal(console,"Total Memory: ",COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addHexaToCurrentTerminal(console,total_memory,COLOR_BLUE,COLOR_LIGHT_BROWN);
            console_addStringToCurrentTerminal(console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
        
    }
    
    */
//    terminal_initialize(&terminal,NULL,DEFAULT_VIDEO_MAX_X,DEFAULT_VIDEO_MAX_Y,DEFAULT_TERMINAL_Y_ROWS);
//    terminal_clearScreen(&terminal,COLOR_BLACK);
/*//    terminal_clearScreen(&terminal,COLOR_BLACK);
    memset (buffer1,0,300);
    memset (buffer2,0,300);
    memcpy (buffer1,"This is kemosparc here!!!!!!!!XX",strlen("This is kemosparc here!!!!!!!!XX"));
    memcpy (buffer2,buffer1,strlen(buffer1));
    console_preInialize(&console);
    
    buffer1 [strlen(buffer1)-1] = 'B';
    //buffer1 [10] = 'B';
    
    char * tt = memcmp16 ((uint16_t *)buffer1,(uint16_t *)buffer2,strlen(buffer1)/2);
    
    if ( tt == NULL)
        console_addStringToCurrentTerminal(&console,"buffer1 == buffer1\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
    else 
    {
        console_addStringToCurrentTerminal(&console,"Mismatch at: ",COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(&console,tt,COLOR_BLUE,COLOR_LIGHT_BROWN);        
        console_addStringToCurrentTerminal(&console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
    }*/


/*    for (  i = 0 ; i <= 0x10000 ; i++)
    {
        console_addStringToCurrentTerminal(&console,buffer1,COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addHexaToCurrentTerminal(&console,i,COLOR_BLUE,COLOR_LIGHT_BROWN);
        console_addStringToCurrentTerminal(&console,"\n",COLOR_BLUE,COLOR_LIGHT_BROWN);
        
    }*/
/*    terminal_setPosition(&terminal,0,4);    
    terminal_putString(&terminal,buffer2,COLOR_BLUE,COLOR_LIGHT_BROWN);
    
    memmove (buffer2,buffer1,strlen(buffer1));
    
    terminal_setPosition(&terminal,0,5);    
    terminal_putString(&terminal,buffer2,COLOR_BLUE,COLOR_LIGHT_BROWN);
    
    terminal_setPosition(&terminal,0,6);    
    terminal_putString(&terminal,buffer2+6,COLOR_BLUE,COLOR_LIGHT_BROWN);
    
    memmove32 ((uint32_t *)buffer2+6,(uint32_t *)buffer2,strlen(buffer2)/4);
    terminal_setPosition(&terminal,0,7);    
    terminal_putString(&terminal,buffer2,COLOR_BLUE,COLOR_LIGHT_BROWN);

    
    memmove (buffer2,buffer1,strlen(buffer1));

//    buffer1[9]='B';
//    buffer1[strlen(buffer1)-1]='B';
//    buffer1[strlen(buffer1)]='B';
//    buffer1[strlen(buffer1)]='B';
    char * t = (char *)rmemcmp64((uint64_t *)buffer1,(uint64_t *)buffer2,strlen(buffer1)/8);
    if ( t == NULL)
    {
        terminal_setPosition(&terminal,0,8);
        terminal_putString(&terminal,"buffer1 == buffer2",COLOR_BLUE,COLOR_LIGHT_BROWN);
    }
    else
    {
        terminal_setPosition(&terminal,0,8);
        terminal_putString(&terminal,t,COLOR_BLUE,COLOR_LIGHT_BROWN);
    }
    
    
    
//    terminal_setPosition(&terminal,0,10);
//    terminal_putString(&terminal,buffer1,COLOR_BLUE,COLOR_LIGHT_BROWN);
    char * temp = scanmem (ptr1,E820_MEMORY_INDICATOR,1024*1024,E820_MEMORY_INDICATOR_LENGTH);

    if ( temp != NULL)
    {

        terminal_setPosition(&terminal,0,11);
        terminal_putHexa(&terminal,(uint64_t)temp,COLOR_BLUE,COLOR_LIGHT_BROWN,true);
        terminal_setPosition(&terminal,0,10);
        terminal_putString(&terminal,temp,COLOR_BLUE,COLOR_LIGHT_BROWN);
    }    
    else 
    {
        terminal_setPosition(&terminal,0,11);
        terminal_putString(&terminal,"Temp is nULL",COLOR_BLUE,COLOR_LIGHT_BROWN);
        
    }*/
    
    uint8_t * prdt1 = (uint8_t *) kvalloc(&kernel.memoryAllocator,0x1000);
    uint8_t * prdt2 = (uint8_t *) kvalloc(&kernel.memoryAllocator,0x1000);
    uint8_t * dma_phy_address1 = (uint8_t *) kvalloc(&kernel.memoryAllocator,0x10000);
    uint8_t * dma_phy_address2 = (uint8_t *) kvalloc(&kernel.memoryAllocator,0x10000);
                                                         
    buffer = (uint8_t *) valloc(&kernel.memoryAllocator,0xAA893200);
    console_addStringToCurrentTerminal(console,"Buffer Address:",COLOR_RED,COLOR_LIGHT_BROWN);     
    console_addHexaToCurrentTerminal(console,(uint64_t)buffer,COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addStringToCurrentTerminal(console,"\n",COLOR_RED,COLOR_LIGHT_BROWN);   
                        
    memset (buffer,0,0xAA893200);
    memset (dma_phy_address1,0,0x10000);
    memset (dma_phy_address2,0,0x10000);
    initATAManager(prdt1,prdt2,dma_phy_address1,dma_phy_address2);
    uint8_t ata_disks = detectATADisks();
    console_addStringToCurrentTerminal(console,"Number of ATA Disks Detected:",COLOR_RED,COLOR_LIGHT_BROWN);     
    console_addHexaToCurrentTerminal(console,ata_disks,COLOR_BLUE,COLOR_LIGHT_BROWN);
    console_addStringToCurrentTerminal(console,"\n",COLOR_RED,COLOR_LIGHT_BROWN);   
//248b1d
    registerInterrupt(IRQ14,ataHandleInterrupt);
    registerInterrupt(IRQ15,ataHandleInterrupt);
    readDMADisk(kernel.ataManager.ataDisks[1],0x0,buffer,0x554498);
        
}
